// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	chain "github.com/Mantelijo/deblock-backend/internal/chain"
	mock "github.com/stretchr/testify/mock"
)

// WalletTransactionTracker is an autogenerated mock type for the WalletTransactionTracker type
type WalletTransactionTracker struct {
	mock.Mock
}

type WalletTransactionTracker_Expecter struct {
	mock *mock.Mock
}

func (_m *WalletTransactionTracker) EXPECT() *WalletTransactionTracker_Expecter {
	return &WalletTransactionTracker_Expecter{mock: &_m.Mock}
}

// TrackWallet provides a mock function with given fields: wallet, _a1
func (_m *WalletTransactionTracker) TrackWallet(wallet string, _a1 chain.ChainName) error {
	ret := _m.Called(wallet, _a1)

	if len(ret) == 0 {
		panic("no return value specified for TrackWallet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, chain.ChainName) error); ok {
		r0 = rf(wallet, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WalletTransactionTracker_TrackWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrackWallet'
type WalletTransactionTracker_TrackWallet_Call struct {
	*mock.Call
}

// TrackWallet is a helper method to define mock.On call
//   - wallet string
//   - _a1 chain.ChainName
func (_e *WalletTransactionTracker_Expecter) TrackWallet(wallet interface{}, _a1 interface{}) *WalletTransactionTracker_TrackWallet_Call {
	return &WalletTransactionTracker_TrackWallet_Call{Call: _e.mock.On("TrackWallet", wallet, _a1)}
}

func (_c *WalletTransactionTracker_TrackWallet_Call) Run(run func(wallet string, _a1 chain.ChainName)) *WalletTransactionTracker_TrackWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(chain.ChainName))
	})
	return _c
}

func (_c *WalletTransactionTracker_TrackWallet_Call) Return(_a0 error) *WalletTransactionTracker_TrackWallet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WalletTransactionTracker_TrackWallet_Call) RunAndReturn(run func(string, chain.ChainName) error) *WalletTransactionTracker_TrackWallet_Call {
	_c.Call.Return(run)
	return _c
}

// UntrackWallet provides a mock function with given fields: wallet, _a1
func (_m *WalletTransactionTracker) UntrackWallet(wallet string, _a1 chain.ChainName) error {
	ret := _m.Called(wallet, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UntrackWallet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, chain.ChainName) error); ok {
		r0 = rf(wallet, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WalletTransactionTracker_UntrackWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntrackWallet'
type WalletTransactionTracker_UntrackWallet_Call struct {
	*mock.Call
}

// UntrackWallet is a helper method to define mock.On call
//   - wallet string
//   - _a1 chain.ChainName
func (_e *WalletTransactionTracker_Expecter) UntrackWallet(wallet interface{}, _a1 interface{}) *WalletTransactionTracker_UntrackWallet_Call {
	return &WalletTransactionTracker_UntrackWallet_Call{Call: _e.mock.On("UntrackWallet", wallet, _a1)}
}

func (_c *WalletTransactionTracker_UntrackWallet_Call) Run(run func(wallet string, _a1 chain.ChainName)) *WalletTransactionTracker_UntrackWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(chain.ChainName))
	})
	return _c
}

func (_c *WalletTransactionTracker_UntrackWallet_Call) Return(_a0 error) *WalletTransactionTracker_UntrackWallet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WalletTransactionTracker_UntrackWallet_Call) RunAndReturn(run func(string, chain.ChainName) error) *WalletTransactionTracker_UntrackWallet_Call {
	_c.Call.Return(run)
	return _c
}

// NewWalletTransactionTracker creates a new instance of WalletTransactionTracker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWalletTransactionTracker(t interface {
	mock.TestingT
	Cleanup(func())
}) *WalletTransactionTracker {
	mock := &WalletTransactionTracker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
