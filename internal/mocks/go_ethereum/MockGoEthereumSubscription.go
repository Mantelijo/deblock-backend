// Code generated by mockery v2.46.3. DO NOT EDIT.

package go_ethereuem_mocks

import mock "github.com/stretchr/testify/mock"

// MockGoEthereumSubscription is an autogenerated mock type for the Subscription type
type MockGoEthereumSubscription struct {
	mock.Mock
}

type MockGoEthereumSubscription_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGoEthereumSubscription) EXPECT() *MockGoEthereumSubscription_Expecter {
	return &MockGoEthereumSubscription_Expecter{mock: &_m.Mock}
}

// Err provides a mock function with given fields:
func (_m *MockGoEthereumSubscription) Err() <-chan error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 <-chan error
	if rf, ok := ret.Get(0).(func() <-chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	return r0
}

// MockGoEthereumSubscription_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type MockGoEthereumSubscription_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *MockGoEthereumSubscription_Expecter) Err() *MockGoEthereumSubscription_Err_Call {
	return &MockGoEthereumSubscription_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *MockGoEthereumSubscription_Err_Call) Run(run func()) *MockGoEthereumSubscription_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGoEthereumSubscription_Err_Call) Return(_a0 <-chan error) *MockGoEthereumSubscription_Err_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoEthereumSubscription_Err_Call) RunAndReturn(run func() <-chan error) *MockGoEthereumSubscription_Err_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function with given fields:
func (_m *MockGoEthereumSubscription) Unsubscribe() {
	_m.Called()
}

// MockGoEthereumSubscription_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type MockGoEthereumSubscription_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
func (_e *MockGoEthereumSubscription_Expecter) Unsubscribe() *MockGoEthereumSubscription_Unsubscribe_Call {
	return &MockGoEthereumSubscription_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe")}
}

func (_c *MockGoEthereumSubscription_Unsubscribe_Call) Run(run func()) *MockGoEthereumSubscription_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGoEthereumSubscription_Unsubscribe_Call) Return() *MockGoEthereumSubscription_Unsubscribe_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGoEthereumSubscription_Unsubscribe_Call) RunAndReturn(run func()) *MockGoEthereumSubscription_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGoEthereumSubscription creates a new instance of MockGoEthereumSubscription. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGoEthereumSubscription(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGoEthereumSubscription {
	mock := &MockGoEthereumSubscription{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
